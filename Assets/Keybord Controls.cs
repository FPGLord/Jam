//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Keybord Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeybordControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeybordControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Keybord Controls"",
    ""maps"": [
        {
            ""name"": ""Bucket"",
            ""id"": ""bd676006-5ec5-4d40-9ea8-3fd71582df2a"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""8b21eb2c-b44e-4f61-9840-22c7f7ef037b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""166d058b-3ed2-4742-bf9a-93bd15efdfef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6de830be-0f5d-484f-be50-b7fcf21f52fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20616587-9df1-45ab-9567-3c5b363cb820"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bucket
        m_Bucket = asset.FindActionMap("Bucket", throwIfNotFound: true);
        m_Bucket_Mover = m_Bucket.FindAction("Mover", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bucket
    private readonly InputActionMap m_Bucket;
    private List<IBucketActions> m_BucketActionsCallbackInterfaces = new List<IBucketActions>();
    private readonly InputAction m_Bucket_Mover;
    public struct BucketActions
    {
        private @KeybordControls m_Wrapper;
        public BucketActions(@KeybordControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Bucket_Mover;
        public InputActionMap Get() { return m_Wrapper.m_Bucket; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BucketActions set) { return set.Get(); }
        public void AddCallbacks(IBucketActions instance)
        {
            if (instance == null || m_Wrapper.m_BucketActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BucketActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
        }

        private void UnregisterCallbacks(IBucketActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
        }

        public void RemoveCallbacks(IBucketActions instance)
        {
            if (m_Wrapper.m_BucketActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBucketActions instance)
        {
            foreach (var item in m_Wrapper.m_BucketActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BucketActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BucketActions @Bucket => new BucketActions(this);
    public interface IBucketActions
    {
        void OnMover(InputAction.CallbackContext context);
    }
}
